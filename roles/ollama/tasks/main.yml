---
- name: Validate GPU configuration
  ansible.builtin.fail:
    msg: "ollama_gpu_syntax must be 'modern' or 'classic'"
  when: ollama_use_gpu and ollama_gpu_syntax not in ['modern', 'classic']

- name: Check NVIDIA Docker runtime availability
  ansible.builtin.command: docker info --format '{% raw %}{{.Runtimes.nvidia}}{% endraw %}'
  register: nvidia_runtime_check
  changed_when: false
  failed_when: false
  when: ollama_use_gpu

- name: Warn if NVIDIA runtime not available
  ansible.builtin.debug:
    msg: "WARNING: NVIDIA Docker runtime not detected. GPU acceleration may not work."
  when:
    - ollama_use_gpu
    - nvidia_runtime_check.rc != 0 or nvidia_runtime_check.stdout == '<no value>'

- name: Create Ollama directories
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  loop:
    - "{{ ollama_app_path }}"
    - "{{ ollama_backup_dir }}"
  when: item != ""


- name: Create backup of existing docker-compose.yml if it exists
  ansible.builtin.copy:
    src: "{{ ollama_app_path }}/docker-compose.yml"
    dest: "{{ ollama_backup_dir }}/docker-compose.yml.{{ ansible_date_time.epoch }}"
    remote_src: true
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
  register: backup_result
  when:
    - ollama_backup_enabled
    - ansible_check_mode == false
  failed_when:
    - backup_result is failed
    - "'not found' not in (backup_result.msg | default(''))"

- name: Deploy docker-compose configuration
  ansible.builtin.template:
    src: docker-compose.yml.j2
    dest: "{{ ollama_app_path }}/docker-compose.yml"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
    backup: "{{ ollama_backup_enabled }}"
  notify: Restart Ollama containers

- name: Pull latest Ollama image (if policy allows)
  community.docker.docker_image:
    name: "{{ ollama_image }}"
    source: pull
    force_source: "{{ ollama_pull_policy == 'always' }}"
  when: ollama_pull_policy != 'never'

- name: Manage Docker containers
  community.docker.docker_compose_v2:
    project_src: "{{ ollama_app_path }}"
    state: present
    pull: "{{ ollama_pull_policy }}"
    recreate: "{{ ollama_recreate_policy }}"
    wait: true
    wait_timeout: 60
  register: compose_result

- name: Wait for Ollama API to be ready
  ansible.builtin.uri:
    url: "http://localhost:{{ ollama_api_port }}/api/version"
    method: GET
    status_code: 200
  register: ollama_health
  until: ollama_health.status == 200
  retries: 12
  delay: 5
  when: compose_result is succeeded

- name: Extract Ollama CLI from container
  block:
    - name: Check if CLI already exists and get version
      ansible.builtin.stat:
        path: "{{ ollama_cli_path }}"
      register: existing_cli

    - name: Get existing CLI version
      ansible.builtin.command: "{{ ollama_cli_path }} --version"
      register: existing_cli_version
      changed_when: false
      failed_when: false
      when: existing_cli.stat.exists

    - name: Get container version
      community.docker.docker_container_exec:
        container: "{{ ollama_container_name }}"
        command: /bin/ollama --version
      register: container_version
      failed_when: container_version.rc != 0

    - name: Extract CLI if versions differ or CLI doesn't exist
      when: >
        not existing_cli.stat.exists or
        existing_cli_version.stdout != container_version.stdout
      block:
        - name: Create temporary container for CLI extraction
          community.docker.docker_container:
            name: ollama-cli-temp
            image: "{{ ollama_image }}"
            state: started
            recreate: true
            auto_remove: false
            command: sleep infinity

        - name: Extract Ollama CLI to host
          ansible.builtin.command: docker cp ollama-cli-temp:/bin/ollama {{ ollama_cli_path }}
          become: true

        - name: Set CLI permissions
          ansible.builtin.file:
            path: "{{ ollama_cli_path }}"
            mode: '0755'
            owner: root
            group: root
          become: true

        - name: Remove temporary container
          community.docker.docker_container:
            name: ollama-cli-temp
            state: absent
            force_kill: true

        - name: Verify CLI extraction
          ansible.builtin.command: "{{ ollama_cli_path }} --version"
          register: new_cli_version
          changed_when: false

        - name: Show version update
          ansible.builtin.debug:
            msg: "CLI updated: {{ existing_cli_version.stdout | default('not installed') }} â†’ {{ new_cli_version.stdout }}"

- name: Configure CLI environment
  ansible.builtin.template:
    src: ollama-env.sh.j2
    dest: "{{ ollama_profile_script }}"
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Create CLI wrapper script for easy usage
  ansible.builtin.template:
    src: ollama-wrapper.sh.j2
    dest: /usr/local/bin/ollama-local
    mode: '0755'
    owner: root
    group: root
  become: true

- name: Display deployment summary
  ansible.builtin.debug:
    msg:
      - "ðŸ¦™ Ollama deployed successfully!"
      - "Container: {{ ollama_container_name }} ({{ container_version.stdout | default('unknown') }})"
      - "CLI: {{ ollama_cli_path }} ({{ new_cli_version.stdout | default(existing_cli_version.stdout) | default('unknown') }})"
      - "API: http://localhost:{{ ollama_api_port }}"
      - "GPU: {{ 'enabled' if ollama_use_gpu else 'disabled' }}"
      - ""
      - "Usage:"
      - "  source {{ ollama_profile_script }} && ollama list"
      - "  ollama-local list  # Direct wrapper"
